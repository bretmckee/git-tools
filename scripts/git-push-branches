#! /bin/bash
#
# git-push-to-branches: Push branches for all commits that
# have a directive that are new on this branch (i.e. not contained in the merge
# base with master)

# Also add:
# git config --global alias.pb push-branches
#
# Inspired by git-push-to-target, which was:
# Copyright (c) 2017 William Chargin. Released under the MIT license.
# see https://wchargin.github.io/posts/managing-dependent-pull-requests

set -x

SINGLE=${SINGLE:-false}
DIRECTIVE='bretmckee-branch'  # any regex metacharacters should be escaped
SKIP='wip'
BRANCH_PREFIX='bretmckee/'
DEFAULT_BRANCH=$(basename $(git symbolic-ref --short refs/remotes/origin/HEAD))

REMOTE=${1:-origin}
PARENT_BRANCH=${2:-${DEFAULT_BRANCH}}

target_branch() {
    directive="$( \
        git show --quiet --pretty='%B' $1 \
        | sed -n 's/^'"${DIRECTIVE}"': \([/A-Za-z0-9_.-]\+\)$/\1/p' \
        ; )"
    if [ -z "${directive}" ]; then
        # printf >&2 'error: missing "%s" directive\n' "${DIRECTIVE}"
        return 0
    fi
    if [ "$(printf '%s\n' "${directive}" | wc -l)" -gt 1 ]; then
        printf >&2 'error: multiple "%s" directives\n' "${DIRECTIVE}"
        return 1
    fi
    printf '%s%s\n' "${BRANCH_PREFIX}" "${directive}"
}

skip() {
  git show --quiet --pretty='%s' $1 | grep -qi "${SKIP}"
}

MERGE_BASE=$(git merge-base HEAD ${PARENT_BRANCH})
if [ -z ${MERGE_BASE} ]
then
  echo "unable to determine merge base for HEAD and ${PARENT}" 1>&2
  exit 1
fi


BRANCHES=()
SHAS=()
CAN_SKIP=true
NEEDS_BRANCH=""
while read COMMIT
do
  # We can skip some commits at the beginning, but once we
  # have found a non-skip commit we stop checking.
  if ${CAN_SKIP}
  then
    if skip ${COMMIT}
    then
      continue
    fi
    CAN_SKIP=false
  fi
  if [ -z ${NEEDS_BRANCH} ]
  then
    NEEDS_BRANCH=${COMMIT}
  fi
  BRANCH_NAME=$(target_branch ${COMMIT})
  if [ $? -ne 0 ]
  then
    echo "processing failed for commit ${COMMIT}" 2>&1
    exit 1
  fi

  if [ -z ${BRANCH_NAME} ]
  then
    continue
  fi
  BRANCHES+=("${BRANCH_NAME}")
  SHAS+=("${NEEDS_BRANCH}")
  NEEDS_BRANCH=""
done < <(git rev-list ${MERGE_BASE}..HEAD)


for i in $(echo "${!BRANCHES[@]} " | tac -s ' ')
do
  BRANCH_NAME=${BRANCHES[${i}]}
  SHA=${SHAS[${i}]}
  EXISTING_HASH=$(git rev-parse remotes/${REMOTE}/${BRANCH_NAME}) 2> /dev/null

  if [ "X${EXISTING_HASH}" != "X${SHA}" ]
  then
    echo "Assigning branch ${BRANCH_NAME} to commit ${SHA} based on marker in ${COMMIT}"
    git push --force-with-lease "${REMOTE}" ${SHA}:refs/heads/"${BRANCH_NAME}"
  else
    echo "Not updating unchanged branch ${BRANCH_NAME} with command " git push --force-with-lease "${REMOTE}" ${SHA}:refs/heads/"${BRANCH_NAME}"
  fi
  if ${SINGLE}
  then
    break
  fi
done
